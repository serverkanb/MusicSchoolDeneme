#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using DataAccess.Contexts;
using DataAccess.Entities;
using Business.Services;
using Business.Models;
using AppCore.Results.Bases;
using DataAccess.Repositories;

//Generated by ScaffoldApp.
namespace MusicSchool.Controllers
{
    public class TeachersController : Controller
    {
        // Add service injections here
        private readonly ITeacherService _teacherService;
        private readonly IInstrumentService _instrumentService;

        public TeachersController(ITeacherService teacherService, IInstrumentService instrumentService)
        {
            _teacherService = teacherService;
            _instrumentService = instrumentService;
        }

        // GET: Teachers
        public IActionResult Index()
        {
            List<TeacherModel> teacherList = _teacherService.Query().ToList();  // TODO: Add get list service logic here
            return View(teacherList);
        }

        // GET: Teachers/Details/5
        public IActionResult Details(int id)
        {
            TeacherModel teacher = _teacherService.Query().SingleOrDefault(s => s.Id == id); // TODO: Add get item service logic here
            if (teacher == null)
            {
                return NotFound();
            }
            return View(teacher);
        }

        // GET: Teachers/Create
        public IActionResult Create()
        {
            TeacherModel model = new TeacherModel();

           ViewBag.Instruments = new SelectList(_instrumentService.Query().ToList(), "Id","Name");
            return View();
        }

        // POST: Teachers/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(TeacherModel teacher)
        {
            if (ModelState.IsValid)
            {
                var result = _teacherService.Add(teacher);
                if (result.IsSuccessful)
                {
                    TempData["Message"] = result.Message;
                    return RedirectToAction(nameof(Index));
                }
                ViewData["Message"] = result.Message;
            }
            ViewBag.Instruments = new SelectList(_instrumentService.Query().ToList(), "Id", "Name",teacher.InstrumentId);
            return View(teacher);
        }

        // GET: Teachers/Edit/5
        public IActionResult Edit(int id)
        {

			TeacherModel teacher = _teacherService.Query().SingleOrDefault(s => s.Id == id);
            if (teacher == null)
            {
                return NotFound();
            }
            ViewBag.InstrumentId = new SelectList(_instrumentService.Query().ToList(), "Id", "Name", teacher.InstrumentId);
            return View(teacher);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(TeacherModel teacher)
        {
            if (ModelState.IsValid)
            {
                var result = _teacherService.Update(teacher);
                if (result.IsSuccessful)
                {
                    TempData["Message"] = result.Message; // success
                    return RedirectToAction(nameof(Index));
                }
                ModelState.AddModelError("", result.Message); // error
            }
            ViewBag.InstrumentId = new SelectList(_instrumentService.Query().ToList(), "Id", "Name", teacher.InstrumentId);
            return View(teacher);
        }

        // GET: Teachers/Delete/5
        public IActionResult Delete(int id)
        {
            TeacherModel teacher = _teacherService.Query().SingleOrDefault(s => s.Id == id);
            if (teacher == null)
            {
                return NotFound();
            }

            return View(teacher);
        }

        // POST: Teachers/Delete
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(int id)
        {
            Result result = _teacherService.Delete(id);
            TempData["Message"] = result.Message;
            return RedirectToAction(nameof(Index));
        }
    }
}
