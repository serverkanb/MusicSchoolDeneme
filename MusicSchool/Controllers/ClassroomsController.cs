#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using DataAccess.Contexts;
using DataAccess.Entities;
using Business.Services;
using Business.Models;
using AppCore.Results.Bases;

//Generated by ScaffoldApp.
namespace MusicSchool.Controllers
{
    public class ClassroomsController : Controller
    {
        // Add service injections here
        private readonly IClassroomService _classroomService;

        public ClassroomsController(IClassroomService classroomService)
        {
            _classroomService = classroomService;
        }

        // GET: Classrooms
        public IActionResult Index()
        {
			var classroom = _classroomService.Query().ToList();
			return View(classroom);
		}

        // GET: Classrooms/Details/5
        public IActionResult Details(int id)
        {
			ClassroomModel classroom = _classroomService.Query().SingleOrDefault(c => c.Id == id);  // TODO: Add get item service logic here
			if (classroom is null)
			{
				return NotFound();
			}
			return View(classroom);
		}

        // GET: Classrooms/Create
        public IActionResult Create()
        {
			ClassroomModel model = new ClassroomModel();

			return View(model);
		}

        // POST: Classrooms/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(ClassroomModel classroom)
        {
			if (ModelState.IsValid)
			{
				Result result = _classroomService.Add(classroom);
				if (result.IsSuccessful)
				{
					TempData["Message"] = result.Message;
					return RedirectToAction(nameof(Index));
				}
				ViewData["Message"] = result.Message;
			}
			
			return View(classroom);
		}

        
        public IActionResult Edit(int id)
        {
			var classroom = _classroomService.Query().SingleOrDefault(c => c.Id == id);
			if (classroom is null)
			{
				return NotFound();
			}

			return View(classroom);
		}

        // POST: Classrooms/Edit
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(ClassroomModel classroom)
        {
			if (ModelState.IsValid)
			{
				var result = _classroomService.Update(classroom);
				if (result.IsSuccessful)
				{
					TempData["Message"] = result.Message; // success
					return RedirectToAction(nameof(Index));
				}
				ModelState.AddModelError("", result.Message); // error
			}
			// Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
			return View(classroom);
		}

        // GET: Classrooms/Delete/5
        public IActionResult Delete(int id)
        {
			ClassroomModel classroom = _classroomService.Query().SingleOrDefault(c => c.Id == id);
			if (classroom is null)
			{
				return NotFound();
			}

			return View(classroom);
		}

        // POST: Classrooms/Delete
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(int id)
        {
			Result result = _classroomService.Delete(id);
			TempData["Message"] = result.Message;
			return RedirectToAction(nameof(Index));
		}
	}
}
